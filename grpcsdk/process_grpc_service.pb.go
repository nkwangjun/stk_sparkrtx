// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: process_grpc_service.proto

package grpcsdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定时拉取游戏进程健康检查
type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_grpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_grpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_process_grpc_service_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthStatus bool `protobuf:"varint,1,opt,name=healthStatus,proto3" json:"healthStatus,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_grpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_process_grpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_process_grpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckResponse) GetHealthStatus() bool {
	if x != nil {
		return x.HealthStatus
	}
	return false
}

// 游戏属性详情
type GameProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 属性名称（键）
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 属性值（值）
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GameProperty) Reset() {
	*x = GameProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_grpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameProperty) ProtoMessage() {}

func (x *GameProperty) ProtoReflect() protoreflect.Message {
	mi := &file_process_grpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameProperty.ProtoReflect.Descriptor instead.
func (*GameProperty) Descriptor() ([]byte, []int) {
	return file_process_grpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *GameProperty) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GameProperty) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// game server session
type GameServerSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameServerSessionId   string          `protobuf:"bytes,1,opt,name=gameServerSessionId,proto3" json:"gameServerSessionId,omitempty"`
	FleetId               string          `protobuf:"bytes,2,opt,name=fleetId,proto3" json:"fleetId,omitempty"`
	Name                  string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MaxPlayers            int32           `protobuf:"varint,4,opt,name=maxPlayers,proto3" json:"maxPlayers,omitempty"`
	Joinable              bool            `protobuf:"varint,5,opt,name=joinable,proto3" json:"joinable,omitempty"`
	GameProperties        []*GameProperty `protobuf:"bytes,6,rep,name=gameProperties,proto3" json:"gameProperties,omitempty"`
	Port                  int32           `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	IpAddress             string          `protobuf:"bytes,8,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	GameServerSessionData string          `protobuf:"bytes,9,opt,name=gameServerSessionData,proto3" json:"gameServerSessionData,omitempty"`
	MatchmakerData        string          `protobuf:"bytes,10,opt,name=matchmakerData,proto3" json:"matchmakerData,omitempty"`
	DnsName               string          `protobuf:"bytes,11,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *GameServerSession) Reset() {
	*x = GameServerSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_grpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSession) ProtoMessage() {}

func (x *GameServerSession) ProtoReflect() protoreflect.Message {
	mi := &file_process_grpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSession.ProtoReflect.Descriptor instead.
func (*GameServerSession) Descriptor() ([]byte, []int) {
	return file_process_grpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *GameServerSession) GetGameServerSessionId() string {
	if x != nil {
		return x.GameServerSessionId
	}
	return ""
}

func (x *GameServerSession) GetFleetId() string {
	if x != nil {
		return x.FleetId
	}
	return ""
}

func (x *GameServerSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameServerSession) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *GameServerSession) GetJoinable() bool {
	if x != nil {
		return x.Joinable
	}
	return false
}

func (x *GameServerSession) GetGameProperties() []*GameProperty {
	if x != nil {
		return x.GameProperties
	}
	return nil
}

func (x *GameServerSession) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GameServerSession) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *GameServerSession) GetGameServerSessionData() string {
	if x != nil {
		return x.GameServerSessionData
	}
	return ""
}

func (x *GameServerSession) GetMatchmakerData() string {
	if x != nil {
		return x.MatchmakerData
	}
	return ""
}

func (x *GameServerSession) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

// 分配gameserversession到游戏进程
type StartGameServerSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameServerSession *GameServerSession `protobuf:"bytes,1,opt,name=gameServerSession,proto3" json:"gameServerSession,omitempty"`
}

func (x *StartGameServerSessionRequest) Reset() {
	*x = StartGameServerSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_grpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGameServerSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGameServerSessionRequest) ProtoMessage() {}

func (x *StartGameServerSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_grpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGameServerSessionRequest.ProtoReflect.Descriptor instead.
func (*StartGameServerSessionRequest) Descriptor() ([]byte, []int) {
	return file_process_grpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *StartGameServerSessionRequest) GetGameServerSession() *GameServerSession {
	if x != nil {
		return x.GameServerSession
	}
	return nil
}

// 结束游戏进程
type ProcessTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminationTime int64 `protobuf:"varint,1,opt,name=terminationTime,proto3" json:"terminationTime,omitempty"`
}

func (x *ProcessTerminateRequest) Reset() {
	*x = ProcessTerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_grpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTerminateRequest) ProtoMessage() {}

func (x *ProcessTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_grpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTerminateRequest.ProtoReflect.Descriptor instead.
func (*ProcessTerminateRequest) Descriptor() ([]byte, []int) {
	return file_process_grpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessTerminateRequest) GetTerminationTime() int64 {
	if x != nil {
		return x.TerminationTime
	}
	return 0
}

// 返回结果, 成功与否看rpc错误码
type ProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessResponse) Reset() {
	*x = ProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_grpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResponse) ProtoMessage() {}

func (x *ProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_process_grpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessResponse.ProtoReflect.Descriptor instead.
func (*ProcessResponse) Descriptor() ([]byte, []int) {
	return file_process_grpc_service_proto_rawDescGZIP(), []int{6}
}

var File_process_grpc_service_proto protoreflect.FileDescriptor

var file_process_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x14, 0x0a, 0x12,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x39, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x03, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x17, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x11,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xc6, 0x02, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x53, 0x64, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a,
	0x0a, 0x0d, 0x4f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x18, 0x4f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x12, 0x4f, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x6f,
	0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x73, 0x64, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_process_grpc_service_proto_rawDescOnce sync.Once
	file_process_grpc_service_proto_rawDescData = file_process_grpc_service_proto_rawDesc
)

func file_process_grpc_service_proto_rawDescGZIP() []byte {
	file_process_grpc_service_proto_rawDescOnce.Do(func() {
		file_process_grpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_process_grpc_service_proto_rawDescData)
	})
	return file_process_grpc_service_proto_rawDescData
}

var file_process_grpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_process_grpc_service_proto_goTypes = []interface{}{
	(*HealthCheckRequest)(nil),            // 0: processService.HealthCheckRequest
	(*HealthCheckResponse)(nil),           // 1: processService.HealthCheckResponse
	(*GameProperty)(nil),                  // 2: processService.GameProperty
	(*GameServerSession)(nil),             // 3: processService.GameServerSession
	(*StartGameServerSessionRequest)(nil), // 4: processService.StartGameServerSessionRequest
	(*ProcessTerminateRequest)(nil),       // 5: processService.ProcessTerminateRequest
	(*ProcessResponse)(nil),               // 6: processService.ProcessResponse
}
var file_process_grpc_service_proto_depIdxs = []int32{
	2, // 0: processService.GameServerSession.gameProperties:type_name -> processService.GameProperty
	3, // 1: processService.StartGameServerSessionRequest.gameServerSession:type_name -> processService.GameServerSession
	0, // 2: processService.GameServerGrpcSdkService.OnHealthCheck:input_type -> processService.HealthCheckRequest
	4, // 3: processService.GameServerGrpcSdkService.OnStartGameServerSession:input_type -> processService.StartGameServerSessionRequest
	5, // 4: processService.GameServerGrpcSdkService.OnProcessTerminate:input_type -> processService.ProcessTerminateRequest
	1, // 5: processService.GameServerGrpcSdkService.OnHealthCheck:output_type -> processService.HealthCheckResponse
	6, // 6: processService.GameServerGrpcSdkService.OnStartGameServerSession:output_type -> processService.ProcessResponse
	6, // 7: processService.GameServerGrpcSdkService.OnProcessTerminate:output_type -> processService.ProcessResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_process_grpc_service_proto_init() }
func file_process_grpc_service_proto_init() {
	if File_process_grpc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_process_grpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_grpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_grpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_grpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_grpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGameServerSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_grpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_grpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_process_grpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_process_grpc_service_proto_goTypes,
		DependencyIndexes: file_process_grpc_service_proto_depIdxs,
		MessageInfos:      file_process_grpc_service_proto_msgTypes,
	}.Build()
	File_process_grpc_service_proto = out.File
	file_process_grpc_service_proto_rawDesc = nil
	file_process_grpc_service_proto_goTypes = nil
	file_process_grpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameServerGrpcSdkServiceClient is the client API for GameServerGrpcSdkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServerGrpcSdkServiceClient interface {
	// 接收健康检查请求
	OnHealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 接收游戏会话
	OnStartGameServerSession(ctx context.Context, in *StartGameServerSessionRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	// 结束游戏进程
	OnProcessTerminate(ctx context.Context, in *ProcessTerminateRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
}

type gameServerGrpcSdkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerGrpcSdkServiceClient(cc grpc.ClientConnInterface) GameServerGrpcSdkServiceClient {
	return &gameServerGrpcSdkServiceClient{cc}
}

func (c *gameServerGrpcSdkServiceClient) OnHealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/processService.GameServerGrpcSdkService/OnHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerGrpcSdkServiceClient) OnStartGameServerSession(ctx context.Context, in *StartGameServerSessionRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/processService.GameServerGrpcSdkService/OnStartGameServerSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerGrpcSdkServiceClient) OnProcessTerminate(ctx context.Context, in *ProcessTerminateRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/processService.GameServerGrpcSdkService/OnProcessTerminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerGrpcSdkServiceServer is the server API for GameServerGrpcSdkService service.
type GameServerGrpcSdkServiceServer interface {
	// 接收健康检查请求
	OnHealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// 接收游戏会话
	OnStartGameServerSession(context.Context, *StartGameServerSessionRequest) (*ProcessResponse, error)
	// 结束游戏进程
	OnProcessTerminate(context.Context, *ProcessTerminateRequest) (*ProcessResponse, error)
}

// UnimplementedGameServerGrpcSdkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServerGrpcSdkServiceServer struct {
}

func (*UnimplementedGameServerGrpcSdkServiceServer) OnHealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnHealthCheck not implemented")
}
func (*UnimplementedGameServerGrpcSdkServiceServer) OnStartGameServerSession(context.Context, *StartGameServerSessionRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnStartGameServerSession not implemented")
}
func (*UnimplementedGameServerGrpcSdkServiceServer) OnProcessTerminate(context.Context, *ProcessTerminateRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnProcessTerminate not implemented")
}

func RegisterGameServerGrpcSdkServiceServer(s *grpc.Server, srv GameServerGrpcSdkServiceServer) {
	s.RegisterService(&_GameServerGrpcSdkService_serviceDesc, srv)
}

func _GameServerGrpcSdkService_OnHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerGrpcSdkServiceServer).OnHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processService.GameServerGrpcSdkService/OnHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerGrpcSdkServiceServer).OnHealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerGrpcSdkService_OnStartGameServerSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameServerSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerGrpcSdkServiceServer).OnStartGameServerSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processService.GameServerGrpcSdkService/OnStartGameServerSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerGrpcSdkServiceServer).OnStartGameServerSession(ctx, req.(*StartGameServerSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerGrpcSdkService_OnProcessTerminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerGrpcSdkServiceServer).OnProcessTerminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processService.GameServerGrpcSdkService/OnProcessTerminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerGrpcSdkServiceServer).OnProcessTerminate(ctx, req.(*ProcessTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameServerGrpcSdkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "processService.GameServerGrpcSdkService",
	HandlerType: (*GameServerGrpcSdkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnHealthCheck",
			Handler:    _GameServerGrpcSdkService_OnHealthCheck_Handler,
		},
		{
			MethodName: "OnStartGameServerSession",
			Handler:    _GameServerGrpcSdkService_OnStartGameServerSession_Handler,
		},
		{
			MethodName: "OnProcessTerminate",
			Handler:    _GameServerGrpcSdkService_OnProcessTerminate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "process_grpc_service.proto",
}
